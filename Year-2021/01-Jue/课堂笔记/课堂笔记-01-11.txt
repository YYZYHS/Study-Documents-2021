//如何掌握共享内存、消息队列
1、掌握获取键值的函数ftok（）
2、创建消息队列和共享内存函数 msgget  shmget
3、掌握消息队列和共享内存如何消息传递的？
    1）消息队列，直接recv，send
    2）共享内存，映射之后直接strcmp，解除映射
=============================================
信号
kill -9 进程ID   （kill发送一个信号给进程，这里面9就是信号）
如何看linux系统里所有信号：kill -l

终端上按“Ctrl+c”组合键通常产生中断信号 SIGINT、终端上按"Ctrl+\"键通常产生中断信号 SIGQUIT、终端上按"Ctrl+z"键通常产生中断信号 SIGSTOP

kill 它既可以是个Linux命令，也是一个函数


在linux下C编程的时候，如果不知道该函数所需要的头文件是哪些？
可以使用用户手册命令man

======================================================
设置定时器alarm
#include <stdio.h>
#include <unistd.h>

int main(int argc, char *argv[])
{
	int seconds = 0; 
	seconds = alarm(5); //设置一个定时器，5s定时器
	printf("seconds = %d\n", seconds);  //返回值是0，因为在设置定时器之前没有设置相应的定时器
	sleep(2);
	seconds = alarm(5);  //在设置一个定时器，5s定时器，返回值就是3
	printf("seconds = %d\n", seconds);
	while(1);
	return 0;
}
===========================================================
线程是CPU调度和分派的基本单位
进程是系统中程序执行和资源分配的基本单位

【重点】线程函数的程序在pthread库中，故链接时要加上参数-lpthread。
如果不链接pthread库的话，就会出现如下错误
qst@qst:~$ gcc hello.c -o hello
/tmp/ccCK2pce.o：在函数‘main’中：
hello.c:(.text+0x86)：对‘pthread_create’未定义的引用
hello.c:(.text+0xa1)：对‘pthread_create’未定义的引用
加上参数-lpthread就OK了！
==================================================

int pthread_create(pthread_t *thread,const pthread_attr_t *attr,void *(*start_routine)(void*),void * arg);
这里面的void *(*start_routine)(void*)这个是函数指针，其中这个函数是指针类型的，所以你在定义线程处理函数函数的时候，要定义成指针函数

================================================
信号量广泛用于进程或线程间的同步和互斥，信号量本质上是一个非负的整数计数器，它被用来控制对公共资源的访问。
【重点】信号量是一个非负的整数计数器

进程或线程根据信号量操作结果的值判断是否对公共资源具有访问的权限，当信号量值大于０时，则可以访问，否则将阻塞。
通俗的说就是当信号量大于0的时候，就可以访问公共资源；当信号量等于0的时候，就被阻塞访问公共资源。

===============================================
多进程间通信、多线程编程、sockt网络编程->简历上都可以写上一笔

socket网络编程：1、tcp  2、udp 两种方式

==========================================
int accept(int sockfd,struct sockaddr *cliaddr,socklen_t *addrlen);
【重点】
1、该函数的第二个参数：与服务器相连接的客户端的地址信息
2、该函数的返回值：与服务器相连接的客户端的套接字















